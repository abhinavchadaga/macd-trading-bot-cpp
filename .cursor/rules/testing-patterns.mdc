---
description:
globs:
alwaysApply: false
---
# Testing Patterns and Practices

## Test Organization
- Each test file has its own executable target (no single "unit_tests" target)
- Test files follow the naming pattern `Test<ComponentName>.cpp`
- Use [tests/CMakeLists.txt](mdc:tests/CMakeLists.txt) pattern to automatically create test executables
- Individual test suites can be run directly as standalone executables

## Building and Running Tests
- Use `./build.sh Debug <test_name>` to build specific test executable
- Apply gtest_filter to run only newly created or relevant tests instead of entire suite
- Build the smallest target possible when validating feature compilation
- Use `ctest` to run all tests or individual test executables directly

## Test Structure
- Use Google Test framework (GTest)
- Test utilities and common setup go in separate headers (e.g., [HistoricalDataTestUtils.hpp](mdc:tests/HistoricalDataTestUtils.hpp))
- Mock objects should be created for external dependencies (network, file I/O, time)
- Integration tests should test component interactions without external dependencies

## Testing Practices
- Test each class in isolation with mocked dependencies
- Create separate integration tests for multi-component interactions
- Use descriptive test names that explain the scenario being tested
- Always test error conditions and edge cases
- Verify both success and failure paths for async operations

## Test Development Workflow
- Work incrementally: implement feature → verify compilation -> write tests → run tests -> if success; then wait for code review. else; iterate
- Do not proceed to next implementation phase until current tests pass
- Always confirm tests pass before moving to next feature
- Build and test small chunks rather than completing entire features at once
