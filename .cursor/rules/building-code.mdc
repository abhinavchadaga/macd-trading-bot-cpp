---
description:
globs:
alwaysApply: true
---
# Build System and Compilation

## Build Scripts
- Always use [build.sh](mdc:build.sh) and [configure.sh](mdc:configure.sh) for building
- If you need to extend build scripts for testing, suggest changes rather than using raw build commands
- Build scripts handle proper configuration for Debug/Release modes and dependency management

## Incremental Building
- When working on a feature, build the smallest target possible
- Avoid building all targets until the specific feature compiles and works as expected
- Use `./build.sh Debug <specific_target>` to build individual components

## CMake Integration
- Project uses CMake with C++20 standard ([CMakeLists.txt](mdc:CMakeLists.txt))
- Dependencies managed through system package managers
- Each major component has its own CMakeLists.txt for modular building

## Compilation Workflow
1. Configure build environment with `./configure.sh`
2. Build specific targets with `./build.sh Debug <target>`
3. Test compilation before proceeding to next feature
4. Use incremental builds to validate changes quickly

See [testing-patterns.mdc](mdc:testing-patterns.mdc) for test-specific build patterns.
