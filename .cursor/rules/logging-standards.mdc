---
description:
globs:
alwaysApply: false
---
# Logging Standards

## Logging Framework
- Use easylogging++ as the logging framework
- Include [LoggingUtils.hpp](mdc:include/LoggingUtils.hpp) for logging macros
- Call `configure_logging()` during application initialization

## Logging Macros
- Use provided macros: `LOG_INFO`, `LOG_ERROR`, `LOG_DEBUG`, `LOG_WARNING`
- Always specify class name and function name: `LOG_INFO(ClassName, function_name)`
- Use `CLASS_LOGGER` macro for class-specific logger instances when needed

## Log Format Standards
- Logs should include timestamp, log level, [MACDTradingBot] component name, and function
- Format: `YYYY-MM-DD HH:MM:SS,mmm LEVEL [MACDTradingBot][ClassName::function]`
- Do not include hostname, file paths, line numbers, or other verbose information
- Keep log messages concise but informative

## Logging Practices
- Log entry and exit points for critical operations
- Log all error conditions with relevant context
- Use appropriate log levels:
  - ERROR: Failures that prevent normal operation
  - WARNING: Unexpected conditions that don't stop execution
  - INFO: Normal operational events (connections, orders, etc.)
  - DEBUG: Detailed information for troubleshooting
- Log async operation completions and failures
- Include relevant data (order IDs, symbols, amounts) in log messages

## Performance Considerations
- Logging is synchronous - avoid excessive logging in tight loops
- Use DEBUG level for verbose information that impacts performance
- Structure log messages to be easily parsed and filtered
